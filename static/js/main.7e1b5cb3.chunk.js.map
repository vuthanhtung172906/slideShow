{"version":3,"sources":["Component/Card.js","Component/Nav.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","data","map","item","index","className","src","alt","title","description","href","Nav","onClick","this","clickPrev","clickNext","React","Component","App","useState","dataImage","image","setImg","myRef","createRef","getData","a","fetch","res","json","useEffect","console","log","ref","slide","current","scrollLeft","offsetWidth","scrollWidth","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNAsBeA,MApBf,SAAcC,GAAO,IACVC,EAAQD,EAARC,KACP,OACI,mCACEA,EAAKC,KAAI,SAACC,EAAKC,GAAN,OACP,sBAAKC,UAAU,OAAf,UACI,qBAAKC,IAAKH,EAAKG,IAAKC,IAAI,KAC5B,gCACG,6BAAKJ,EAAKK,QACV,4BAAIL,EAAKM,cACT,mBAAGC,KAAK,IAAR,4BALwBN,S,6BCUxBO,E,uKAbP,OACI,sBAAKN,UAAU,MAAf,UACA,qBAAKA,UAAU,OAAOO,QAASC,KAAKb,MAAMc,UAA1C,SACE,qBAAKR,IAAI,iBAAiBC,IAAI,OAEhC,qBAAKF,UAAU,OAAOO,QAASC,KAAKb,MAAMe,UAA1C,SACE,qBAAKT,IAAI,iBAAiBC,IAAI,c,GAR1BS,IAAMC,WC2CTC,MA1Cf,WAAe,IAAD,EACYC,mBAAS,CAC/BC,UAAW,KAFD,mBACLC,EADK,KACEC,EADF,KAMNC,EAAQP,IAAMQ,YACdC,EAAO,uCAAG,8BAAAC,EAAA,sEACIC,MAAM,aADV,cACRC,EADQ,gBAEKA,EAAIC,OAFT,OAER5B,EAFQ,OAGdqB,EAAO,CACLF,UAAWnB,IAJC,2CAAH,qDAOb6B,qBAAU,WACRC,QAAQC,IAAI,uBACZP,MACA,IACF,IAAMxB,EAAOoB,EAAMD,UAcnB,OACE,sBAAKf,UAAU,UAAf,UACI,qBAAKA,UAAU,MAAM4B,IAAOV,EAA5B,SACE,cAAC,EAAD,CAAMtB,KAAQA,MAEhB,cAAC,EAAD,CAAKa,UAlBO,WAChB,IAAMoB,EAAQX,EAAMY,QACpBD,EAAME,YAAcF,EAAMG,YACvBH,EAAME,YAAc,IACrBF,EAAME,WAAaF,EAAMI,cAcIvB,UAXf,WAChB,IAAMmB,EAAQX,EAAMY,QACpBD,EAAME,YAAcF,EAAMG,YACvBH,EAAME,YAAeF,EAAMI,YAAcJ,EAAMG,cAChDH,EAAME,WAAa,UCrBVG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7e1b5cb3.chunk.js","sourcesContent":["import React,{useState} from \"react\";\n\nfunction Card(props){\n    const {data} = props;\n    return(\n        <>\n         {data.map((item,index) => (\n            <div className=\"card\" key={index}>\n                <img src={item.src} alt=\"\"/>\n            <div>\n               <h2>{item.title}</h2>\n               <p>{item.description}</p>\n               <a href=\"/\">Read More</a>\n              </div> \n            </div>\n          ))\n         }\n        </>\n\n    )\n}\n\nexport default Card;","import React from \"react\"\n\nclass Nav extends React.Component{\n    render(){\n        return(\n            <div className=\"row\">\n            <div className=\"prev\" onClick={this.props.clickPrev}>\n              <img src=\"image/prev.png\" alt=\"\"/>\n            </div>\n            <div className=\"next\" onClick={this.props.clickNext}>\n              <img src=\"image/next.png\" alt=\"\"/>\n            </div>\n          </div>\n        )\n    }\n}\n\nexport default Nav;","import React,{useState, useEffect} from \"react\"\nimport Card from \"./Component/Card\";\nimport Nav from \"./Component/Nav\";\nfunction App(){\n  const [image, setImg] = useState({\n    dataImage: [\n\n    ]\n  })\n  const myRef = React.createRef(); \n  const getData = async()=>{\n    const res = await fetch(\"data.json\");\n    const data = await res.json(); \n    setImg({\n      dataImage: data\n    })\n  };\n  useEffect(()=>{\n    console.log(\"Component did mount\")\n    getData();\n  },[]);\n  const data = image.dataImage;\n  const clickPrev = ()=>{\n    const slide = myRef.current;\n    slide.scrollLeft -= slide.offsetWidth;\n    if(slide.scrollLeft <= 0){\n      slide.scrollLeft = slide.scrollWidth;\n    }\n  }\n  const clickNext = ()=>{\n    const slide = myRef.current;\n    slide.scrollLeft += slide.offsetWidth;\n    if(slide.scrollLeft >= (slide.scrollWidth - slide.offsetWidth )){\n      slide.scrollLeft = 0;\n    }  }\n  return(\n    <div className=\"wrapper\">\n        <div className=\"app\" ref = {myRef}>\n          <Card data = {data}/>\n        </div>\n        <Nav clickPrev={clickPrev} clickNext={clickNext}/>\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}